/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TalentirMarketplaceInterface extends utils.Interface {
  contractName: "TalentirMarketplace";
  functions: {
    "acceptBuyOffer(uint256)": FunctionFragment;
    "activeBuyOffers(uint256)": FunctionFragment;
    "activeSellOffers(uint256)": FunctionFragment;
    "buyOffersEscrow(address,uint256)": FunctionFragment;
    "makeBuyOffer(uint256)": FunctionFragment;
    "makeSellOffer(uint256,uint256)": FunctionFragment;
    "nftAddress()": FunctionFragment;
    "owner()": FunctionFragment;
    "purchase(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setNftContract(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawBuyOffer(uint256)": FunctionFragment;
    "withdrawSellOffer(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptBuyOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "activeBuyOffers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "activeSellOffers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyOffersEscrow",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeBuyOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeSellOffer",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nftAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setNftContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBuyOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSellOffer",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptBuyOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeBuyOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeSellOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyOffersEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeBuyOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeSellOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "purchase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNftContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBuyOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSellOffer",
    data: BytesLike
  ): Result;

  events: {
    "BuyOfferWithdrawn(uint256,address)": EventFragment;
    "NewBuyOffer(uint256,address,uint256)": EventFragment;
    "NewSellOffer(uint256,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RoyaltiesPaid(uint256,uint256,address)": EventFragment;
    "Sale(uint256,address,address,uint256)": EventFragment;
    "SellOfferWithdrawn(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyOfferWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBuyOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSellOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltiesPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellOfferWithdrawn"): EventFragment;
}

export type BuyOfferWithdrawnEvent = TypedEvent<
  [BigNumber, string],
  { tokenId: BigNumber; buyer: string }
>;

export type BuyOfferWithdrawnEventFilter =
  TypedEventFilter<BuyOfferWithdrawnEvent>;

export type NewBuyOfferEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { tokenId: BigNumber; buyer: string; value: BigNumber }
>;

export type NewBuyOfferEventFilter = TypedEventFilter<NewBuyOfferEvent>;

export type NewSellOfferEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { tokenId: BigNumber; seller: string; value: BigNumber }
>;

export type NewSellOfferEventFilter = TypedEventFilter<NewSellOfferEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RoyaltiesPaidEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { tokenId: BigNumber; value: BigNumber; receiver: string }
>;

export type RoyaltiesPaidEventFilter = TypedEventFilter<RoyaltiesPaidEvent>;

export type SaleEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  { tokenId: BigNumber; seller: string; buyer: string; value: BigNumber }
>;

export type SaleEventFilter = TypedEventFilter<SaleEvent>;

export type SellOfferWithdrawnEvent = TypedEvent<
  [BigNumber, string],
  { tokenId: BigNumber; seller: string }
>;

export type SellOfferWithdrawnEventFilter =
  TypedEventFilter<SellOfferWithdrawnEvent>;

export interface TalentirMarketplace extends BaseContract {
  contractName: "TalentirMarketplace";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TalentirMarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptBuyOffer(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    activeBuyOffers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { buyer: string; price: BigNumber }>;

    activeSellOffers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { seller: string; minPrice: BigNumber }>;

    buyOffersEscrow(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    makeBuyOffer(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeSellOffer(
      tokenId: BigNumberish,
      minPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nftAddress(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    purchase(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNftContract(
      talentirNftAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawBuyOffer(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawSellOffer(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptBuyOffer(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  activeBuyOffers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { buyer: string; price: BigNumber }>;

  activeSellOffers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { seller: string; minPrice: BigNumber }>;

  buyOffersEscrow(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  makeBuyOffer(
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeSellOffer(
    tokenId: BigNumberish,
    minPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nftAddress(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  purchase(
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNftContract(
    talentirNftAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawBuyOffer(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawSellOffer(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptBuyOffer(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    activeBuyOffers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { buyer: string; price: BigNumber }>;

    activeSellOffers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { seller: string; minPrice: BigNumber }>;

    buyOffersEscrow(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeBuyOffer(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    makeSellOffer(
      tokenId: BigNumberish,
      minPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nftAddress(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    purchase(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setNftContract(
      talentirNftAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawBuyOffer(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawSellOffer(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BuyOfferWithdrawn(uint256,address)"(
      tokenId?: null,
      buyer?: null
    ): BuyOfferWithdrawnEventFilter;
    BuyOfferWithdrawn(
      tokenId?: null,
      buyer?: null
    ): BuyOfferWithdrawnEventFilter;

    "NewBuyOffer(uint256,address,uint256)"(
      tokenId?: null,
      buyer?: null,
      value?: null
    ): NewBuyOfferEventFilter;
    NewBuyOffer(
      tokenId?: null,
      buyer?: null,
      value?: null
    ): NewBuyOfferEventFilter;

    "NewSellOffer(uint256,address,uint256)"(
      tokenId?: null,
      seller?: null,
      value?: null
    ): NewSellOfferEventFilter;
    NewSellOffer(
      tokenId?: null,
      seller?: null,
      value?: null
    ): NewSellOfferEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RoyaltiesPaid(uint256,uint256,address)"(
      tokenId?: null,
      value?: null,
      receiver?: null
    ): RoyaltiesPaidEventFilter;
    RoyaltiesPaid(
      tokenId?: null,
      value?: null,
      receiver?: null
    ): RoyaltiesPaidEventFilter;

    "Sale(uint256,address,address,uint256)"(
      tokenId?: null,
      seller?: null,
      buyer?: null,
      value?: null
    ): SaleEventFilter;
    Sale(
      tokenId?: null,
      seller?: null,
      buyer?: null,
      value?: null
    ): SaleEventFilter;

    "SellOfferWithdrawn(uint256,address)"(
      tokenId?: null,
      seller?: null
    ): SellOfferWithdrawnEventFilter;
    SellOfferWithdrawn(
      tokenId?: null,
      seller?: null
    ): SellOfferWithdrawnEventFilter;
  };

  estimateGas: {
    acceptBuyOffer(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    activeBuyOffers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    activeSellOffers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyOffersEscrow(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeBuyOffer(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeSellOffer(
      tokenId: BigNumberish,
      minPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nftAddress(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    purchase(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNftContract(
      talentirNftAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawBuyOffer(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawSellOffer(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptBuyOffer(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    activeBuyOffers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activeSellOffers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyOffersEscrow(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeBuyOffer(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeSellOffer(
      tokenId: BigNumberish,
      minPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nftAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchase(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNftContract(
      talentirNftAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawBuyOffer(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawSellOffer(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
