/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface TalentirMarketplaceInterface extends utils.Interface {
  functions: {
    "acceptBuyOffer(address,uint256)": FunctionFragment;
    "activeBuyOffers(address,uint256)": FunctionFragment;
    "activeSellOffers(address,uint256)": FunctionFragment;
    "approvedNftContracts(address)": FunctionFragment;
    "cleanupSelloffers(address,uint256[])": FunctionFragment;
    "getFeeBalance()": FunctionFragment;
    "makeBuyOffer(address,uint256)": FunctionFragment;
    "makeSellOffer(address,uint256,uint256)": FunctionFragment;
    "marketplaceFeePerMill()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "purchase(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setMarketPlaceFee(uint256)": FunctionFragment;
    "setNftContractApproval(address,bool)": FunctionFragment;
    "setPause(bool)": FunctionFragment;
    "totalAmountInEscrow()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawBuyOffer(address,uint256)": FunctionFragment;
    "withdrawFees(address)": FunctionFragment;
    "withdrawSellOffer(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptBuyOffer"
      | "activeBuyOffers"
      | "activeSellOffers"
      | "approvedNftContracts"
      | "cleanupSelloffers"
      | "getFeeBalance"
      | "makeBuyOffer"
      | "makeSellOffer"
      | "marketplaceFeePerMill"
      | "owner"
      | "paused"
      | "purchase"
      | "renounceOwnership"
      | "setMarketPlaceFee"
      | "setNftContractApproval"
      | "setPause"
      | "totalAmountInEscrow"
      | "transferOwnership"
      | "withdrawBuyOffer"
      | "withdrawFees"
      | "withdrawSellOffer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptBuyOffer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "activeBuyOffers",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "activeSellOffers",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedNftContracts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cleanupSelloffers",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makeBuyOffer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeSellOffer",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marketplaceFeePerMill",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchase",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketPlaceFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftContractApproval",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setPause", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "totalAmountInEscrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBuyOffer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSellOffer",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptBuyOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeBuyOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeSellOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedNftContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cleanupSelloffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeBuyOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeSellOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketplaceFeePerMill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "purchase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketPlaceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNftContractApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAmountInEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBuyOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSellOffer",
    data: BytesLike
  ): Result;

  events: {
    "BuyOfferWithdrawn(address,uint256,address)": EventFragment;
    "MarketplaceFeeChanged(uint256)": EventFragment;
    "NewBuyOffer(address,uint256,address,uint256,bool)": EventFragment;
    "NewSellOffer(address,uint256,address,uint256)": EventFragment;
    "NftContractApproved(address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RoyaltiesPaid(address,uint256,uint256,address)": EventFragment;
    "Sale(address,uint256,address,address,uint256)": EventFragment;
    "SellOfferWithdrawn(address,uint256,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyOfferWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketplaceFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBuyOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSellOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NftContractApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltiesPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellOfferWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface BuyOfferWithdrawnEventObject {
  nftAddress: string;
  tokenId: BigNumber;
  buyer: string;
}
export type BuyOfferWithdrawnEvent = TypedEvent<
  [string, BigNumber, string],
  BuyOfferWithdrawnEventObject
>;

export type BuyOfferWithdrawnEventFilter =
  TypedEventFilter<BuyOfferWithdrawnEvent>;

export interface MarketplaceFeeChangedEventObject {
  feePermill: BigNumber;
}
export type MarketplaceFeeChangedEvent = TypedEvent<
  [BigNumber],
  MarketplaceFeeChangedEventObject
>;

export type MarketplaceFeeChangedEventFilter =
  TypedEventFilter<MarketplaceFeeChangedEvent>;

export interface NewBuyOfferEventObject {
  nftAddress: string;
  tokenId: BigNumber;
  buyer: string;
  value: BigNumber;
  previousRefunded: boolean;
}
export type NewBuyOfferEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, boolean],
  NewBuyOfferEventObject
>;

export type NewBuyOfferEventFilter = TypedEventFilter<NewBuyOfferEvent>;

export interface NewSellOfferEventObject {
  nftAddress: string;
  tokenId: BigNumber;
  seller: string;
  value: BigNumber;
}
export type NewSellOfferEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  NewSellOfferEventObject
>;

export type NewSellOfferEventFilter = TypedEventFilter<NewSellOfferEvent>;

export interface NftContractApprovedEventObject {
  nftContractAddress: string;
  approved: boolean;
}
export type NftContractApprovedEvent = TypedEvent<
  [string, boolean],
  NftContractApprovedEventObject
>;

export type NftContractApprovedEventFilter =
  TypedEventFilter<NftContractApprovedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RoyaltiesPaidEventObject {
  nftAddress: string;
  tokenId: BigNumber;
  value: BigNumber;
  receiver: string;
}
export type RoyaltiesPaidEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  RoyaltiesPaidEventObject
>;

export type RoyaltiesPaidEventFilter = TypedEventFilter<RoyaltiesPaidEvent>;

export interface SaleEventObject {
  nftAddress: string;
  tokenId: BigNumber;
  seller: string;
  buyer: string;
  value: BigNumber;
}
export type SaleEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber],
  SaleEventObject
>;

export type SaleEventFilter = TypedEventFilter<SaleEvent>;

export interface SellOfferWithdrawnEventObject {
  nftAddress: string;
  tokenId: BigNumber;
  seller: string;
}
export type SellOfferWithdrawnEvent = TypedEvent<
  [string, BigNumber, string],
  SellOfferWithdrawnEventObject
>;

export type SellOfferWithdrawnEventFilter =
  TypedEventFilter<SellOfferWithdrawnEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface TalentirMarketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TalentirMarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptBuyOffer(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    activeBuyOffers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { buyer: string; price: BigNumber }>;

    activeSellOffers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { seller: string; minPrice: BigNumber }>;

    approvedNftContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    cleanupSelloffers(
      nftAddress: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getFeeBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { feeBalance: BigNumber }>;

    makeBuyOffer(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeSellOffer(
      nftAddress: string,
      tokenId: BigNumberish,
      minPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    marketplaceFeePerMill(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    purchase(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarketPlaceFee(
      newMarketplaceFeePerMill: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNftContractApproval(
      nftContract: string,
      approval: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPause(
      shouldPause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalAmountInEscrow(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawBuyOffer(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFees(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawSellOffer(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptBuyOffer(
    nftAddress: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  activeBuyOffers(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { buyer: string; price: BigNumber }>;

  activeSellOffers(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { seller: string; minPrice: BigNumber }>;

  approvedNftContracts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  cleanupSelloffers(
    nftAddress: string,
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getFeeBalance(overrides?: CallOverrides): Promise<BigNumber>;

  makeBuyOffer(
    nftAddress: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeSellOffer(
    nftAddress: string,
    tokenId: BigNumberish,
    minPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  marketplaceFeePerMill(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  purchase(
    nftAddress: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarketPlaceFee(
    newMarketplaceFeePerMill: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNftContractApproval(
    nftContract: string,
    approval: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPause(
    shouldPause: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalAmountInEscrow(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawBuyOffer(
    nftAddress: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFees(
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawSellOffer(
    nftAddress: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptBuyOffer(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    activeBuyOffers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { buyer: string; price: BigNumber }>;

    activeSellOffers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { seller: string; minPrice: BigNumber }>;

    approvedNftContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cleanupSelloffers(
      nftAddress: string,
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    getFeeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    makeBuyOffer(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    makeSellOffer(
      nftAddress: string,
      tokenId: BigNumberish,
      minPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    marketplaceFeePerMill(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    purchase(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setMarketPlaceFee(
      newMarketplaceFeePerMill: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNftContractApproval(
      nftContract: string,
      approval: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setPause(shouldPause: boolean, overrides?: CallOverrides): Promise<void>;

    totalAmountInEscrow(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawBuyOffer(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFees(receiver: string, overrides?: CallOverrides): Promise<void>;

    withdrawSellOffer(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BuyOfferWithdrawn(address,uint256,address)"(
      nftAddress?: null,
      tokenId?: null,
      buyer?: null
    ): BuyOfferWithdrawnEventFilter;
    BuyOfferWithdrawn(
      nftAddress?: null,
      tokenId?: null,
      buyer?: null
    ): BuyOfferWithdrawnEventFilter;

    "MarketplaceFeeChanged(uint256)"(
      feePermill?: null
    ): MarketplaceFeeChangedEventFilter;
    MarketplaceFeeChanged(feePermill?: null): MarketplaceFeeChangedEventFilter;

    "NewBuyOffer(address,uint256,address,uint256,bool)"(
      nftAddress?: null,
      tokenId?: null,
      buyer?: null,
      value?: null,
      previousRefunded?: null
    ): NewBuyOfferEventFilter;
    NewBuyOffer(
      nftAddress?: null,
      tokenId?: null,
      buyer?: null,
      value?: null,
      previousRefunded?: null
    ): NewBuyOfferEventFilter;

    "NewSellOffer(address,uint256,address,uint256)"(
      nftAddress?: null,
      tokenId?: null,
      seller?: null,
      value?: null
    ): NewSellOfferEventFilter;
    NewSellOffer(
      nftAddress?: null,
      tokenId?: null,
      seller?: null,
      value?: null
    ): NewSellOfferEventFilter;

    "NftContractApproved(address,bool)"(
      nftContractAddress?: null,
      approved?: null
    ): NftContractApprovedEventFilter;
    NftContractApproved(
      nftContractAddress?: null,
      approved?: null
    ): NftContractApprovedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RoyaltiesPaid(address,uint256,uint256,address)"(
      nftAddress?: null,
      tokenId?: null,
      value?: null,
      receiver?: null
    ): RoyaltiesPaidEventFilter;
    RoyaltiesPaid(
      nftAddress?: null,
      tokenId?: null,
      value?: null,
      receiver?: null
    ): RoyaltiesPaidEventFilter;

    "Sale(address,uint256,address,address,uint256)"(
      nftAddress?: null,
      tokenId?: null,
      seller?: null,
      buyer?: null,
      value?: null
    ): SaleEventFilter;
    Sale(
      nftAddress?: null,
      tokenId?: null,
      seller?: null,
      buyer?: null,
      value?: null
    ): SaleEventFilter;

    "SellOfferWithdrawn(address,uint256,address)"(
      nftAddress?: null,
      tokenId?: null,
      seller?: null
    ): SellOfferWithdrawnEventFilter;
    SellOfferWithdrawn(
      nftAddress?: null,
      tokenId?: null,
      seller?: null
    ): SellOfferWithdrawnEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    acceptBuyOffer(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    activeBuyOffers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    activeSellOffers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approvedNftContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cleanupSelloffers(
      nftAddress: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getFeeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    makeBuyOffer(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeSellOffer(
      nftAddress: string,
      tokenId: BigNumberish,
      minPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    marketplaceFeePerMill(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    purchase(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarketPlaceFee(
      newMarketplaceFeePerMill: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNftContractApproval(
      nftContract: string,
      approval: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPause(
      shouldPause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalAmountInEscrow(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawBuyOffer(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFees(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawSellOffer(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptBuyOffer(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    activeBuyOffers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activeSellOffers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approvedNftContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cleanupSelloffers(
      nftAddress: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getFeeBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    makeBuyOffer(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeSellOffer(
      nftAddress: string,
      tokenId: BigNumberish,
      minPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    marketplaceFeePerMill(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchase(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarketPlaceFee(
      newMarketplaceFeePerMill: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNftContractApproval(
      nftContract: string,
      approval: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPause(
      shouldPause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalAmountInEscrow(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawBuyOffer(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFees(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawSellOffer(
      nftAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
